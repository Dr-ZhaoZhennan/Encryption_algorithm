from kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.button import Button\nfrom kivy.uix.textinput import TextInput\nfrom kivy.uix.label import Label\nfrom kivy.core.clipboard import Clipboard\nfrom kivy.properties import BooleanProperty\nfrom kivy.metrics import dp\nfrom kivy.core.window import Window\nimport json, os\nfrom crypto import unicode_shift, base64_codec\n\nCONFIG = os.path.join(App().user_data_dir if App.get_running_app() else os.getcwd(), 'config.json')\n\nclass Root(FloatLayout):\n    panel_visible = BooleanProperty(False)\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.size_hint = (1,1)\n        self.avatar = Button(text='', size_hint=(None,None), size=(dp(64), dp(64)), pos=(dp(200), dp(400)))\n        self.avatar.bind(on_release=lambda *_: self.toggle_panel())\n        self.add_widget(self.avatar)\n        self.panel = BoxLayout(orientation='vertical', size_hint=(None,None), size=(dp(320), dp(260)))\n        self.panel.pos = (self.avatar.x - (self.panel.width-self.avatar.width)/2, self.avatar.top + dp(10))\n        self.combo = Button(text='Unicode码位移（支持中文）', size_hint=(1,None), height=dp(36))\n        self.hint = Label(text='解密算法：Unicode码位移（支持中文）', size_hint=(1,None), height=dp(20))\n        self.text = TextInput(hint_text='请输入或粘贴文本...', multiline=True)\n        hb = BoxLayout(size_hint=(1,None), height=dp(40))\n        b1=Button(text='加密'); b2=Button(text='解密'); b3=Button(text='复制'); b4=Button(text='清空')\n        b1.bind(on_release=lambda *_: self.encrypt()); b2.bind(on_release=lambda *_: self.decrypt()); b3.bind(on_release=lambda *_: Clipboard.copy(self.text.text)); b4.bind(on_release=lambda *_: self.text.clear_widgets() or setattr(self.text,'text',''))\n        hb.add_widget(b1); hb.add_widget(b2); hb.add_widget(b3); hb.add_widget(b4)\n        self.panel.add_widget(self.combo); self.panel.add_widget(self.hint); self.panel.add_widget(self.text); self.panel.add_widget(hb)\n        self.add_widget(self.panel)\n        self.panel.opacity = 0; self.panel.disabled = True\n        self.restore()\n    def toggle_panel(self):\n        self.panel_visible = not self.panel_visible\n        self.panel.opacity = 1 if self.panel_visible else 0\n        self.panel.disabled = not self.panel_visible\n        self.panel.pos = (self.avatar.x - (self.panel.width-self.avatar.width)/2, self.avatar.top + dp(10))\n    def encrypt(self):\n        txt = self.text.text\n        try:\n            self.text.text = unicode_shift.encrypt(txt)\n        except Exception as e:\n            self.text.text = f'加密出错：{e}'\n    def decrypt(self):\n        txt = self.text.text\n        try:\n            self.text.text = unicode_shift.decrypt(txt)\n        except Exception as e:\n            self.text.text = f'解密出错：{e}'\n    def restore(self):\n        try:\n            if os.path.exists(CONFIG):\n                with open(CONFIG,'r',encoding='utf-8') as f:\n                    data=json.load(f)\n                    x,y=data.get('pos',[self.avatar.x,self.avatar.y])\n                    self.avatar.pos=(x,y)\n        except: pass\n    def on_touch_move(self, touch):\n        if self.avatar.collide_point(*touch.pos):\n            self.avatar.center = touch.pos\n            self.panel.pos = (self.avatar.x - (self.panel.width-self.avatar.width)/2, self.avatar.top + dp(10))\n        return super().on_touch_move(touch)\n    def on_touch_up(self, touch):\n        try:\n            with open(CONFIG,'w',encoding='utf-8') as f:\n                json.dump({'pos':[self.avatar.x,self.avatar.y]}, f)\n        except: pass\n        return super().on_touch_up(touch)\n\nclass KApp(App):\n    def build(self):\n        Window.clearcolor=(0.16,0.16,0.16,0)\n        return Root()\n\nif __name__=='__main__':\n    KApp().run()
